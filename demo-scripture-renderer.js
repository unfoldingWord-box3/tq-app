const fs = require('fs');
const path = require('path');
const usfm = require('usfm-js');

// This demo shows how to use the complete USFM processing system
// 1. Convert USFM to JSON
// 2. Process it into clean React-friendly data
// 3. Extract specific verse ranges like "JON 1:3-5"

console.log('🚀 USFM Scripture Renderer Demo\n');

// Read and process USFM file
const usfmPath = path.join(__dirname, 'tests', 'fixtures', 'JON.usfm');
const usfmContent = fs.readFileSync(usfmPath, 'utf8');
const usfmJson = usfm.toJSON(usfmContent);

// Load the cleaned data that was generated by analyze-usfm.js
const cleanedDataPath = path.join(__dirname, 'jonah-cleaned.json');
const scriptureData = JSON.parse(fs.readFileSync(cleanedDataPath, 'utf8'));

console.log(`📖 Loaded: ${scriptureData.book} (${scriptureData.bookCode})`);
console.log(`📚 Chapters: ${scriptureData.chapters.length}`);
console.log(`📝 Total verses: ${scriptureData.chapters.reduce((total, ch) => total + ch.verses.length, 0)}\n`);

// Parse scripture reference function (JavaScript version)
function parseScriptureReference(ref) {
  const cleanRef = ref.trim();
  
  // "JON 1:3-5" or "JON 1:3"
  const pattern = /^([A-Z]{2,4})\s+(\d+):(\d+)(?:-(\d+))?$/i;
  const match = cleanRef.match(pattern);
  
  if (match) {
    const bookCode = match[1].toUpperCase();
    const chapter = parseInt(match[2]);
    const verseStart = parseInt(match[3]);
    const verseEnd = match[4] ? parseInt(match[4]) : verseStart;

    return {
      bookCode,
      chapter,
      verseStart,
      verseEnd,
      displayReference: `${bookCode} ${chapter}:${verseStart}${verseEnd !== verseStart ? `-${verseEnd}` : ''}`
    };
  }
  
  return null;
}

// Get verses by reference function
function getVersesByReference(scripture, reference) {
  const chapter = scripture.chapters.find(ch => ch.number === reference.chapter);
  if (!chapter) return [];

  return chapter.verses.filter(verse => 
    verse.number >= reference.verseStart && verse.number <= reference.verseEnd
  );
}

// Format verses for display
function formatVerses(verses, showNumbers = true) {
  return verses.map(verse => {
    return showNumbers ? `${verse.number} ${verse.text}` : verse.text;
  }).join(' ');
}

// Demo different reference formats
const testReferences = [
  'JON 1:1',      // Single verse
  'JON 1:1-3',    // Verse range  
  'JON 1:3-5',    // The example from the request
  'JON 2:1-2',    // Different chapter
  'JON 4:10-11',  // End of book
];

console.log('🔍 Testing Scripture References:\n');

testReferences.forEach(refString => {
  console.log(`📖 Reference: ${refString}`);
  
  const reference = parseScriptureReference(refString);
  if (!reference) {
    console.log('   ❌ Could not parse reference\n');
    return;
  }
  
  const verses = getVersesByReference(scriptureData, reference);
  if (verses.length === 0) {
    console.log('   ❌ No verses found\n');
    return;
  }
  
  console.log(`   ✅ Found ${verses.length} verse(s):`);
  
  // Show with verse numbers
  const withNumbers = formatVerses(verses, true);
  console.log(`   📝 With numbers: ${withNumbers.substring(0, 100)}${withNumbers.length > 100 ? '...' : ''}`);
  
  // Show without verse numbers (for continuous reading)
  const withoutNumbers = formatVerses(verses, false);
  console.log(`   📖 Clean text: ${withoutNumbers.substring(0, 100)}${withoutNumbers.length > 100 ? '...' : ''}`);
  console.log('');
});

// Show structure that would be used in React components
console.log('⚛️ React Component Data Structure:\n');

const reactExample = {
  scripture: scriptureData,
  currentReference: 'JON 1:3-5',
  displayData: null
};

const ref = parseScriptureReference(reactExample.currentReference);
if (ref) {
  const verses = getVersesByReference(scriptureData, ref);
  reactExample.displayData = {
    reference: ref.displayReference,
    verses: verses.map(verse => ({
      number: verse.number,
      text: verse.text,
      reference: verse.reference
    }))
  };
}

console.log('Example React component props:');
console.log(JSON.stringify(reactExample.displayData, null, 2));

console.log('\n📱 Usage in React Native components:');
console.log(`
// In your component:
import { ScriptureRenderer } from '@/components/ScriptureRenderer';

function MyComponent() {
  const scripture = ${JSON.stringify(scriptureData, null, 2).substring(0, 200)}...;
  
  return (
    <ScriptureRenderer
      scripture={scripture}
      reference="JON 1:3-5"
      showVerseNumbers={true}
      showReference={true}
      highlightVerses={[3, 4]}
    />
  );
}
`);

console.log('✨ Demo complete! You can now:');
console.log('1. Use the ScriptureRenderer component with any USFM data');
console.log('2. Parse references like "JON 1:3-5" automatically');
console.log('3. Extract clean, readable text from complex USFM structure');
console.log('4. Integrate with your existing React Native app');

// Show chapter overview
console.log('\n📋 Full Book Overview:');
scriptureData.chapters.forEach(chapter => {
  console.log(`Chapter ${chapter.number}: verses 1-${chapter.verses.length}`);
  if (chapter.verses.length > 0) {
    const firstVerse = chapter.verses[0];
    console.log(`  First verse: ${firstVerse.text.substring(0, 80)}...`);
  }
});

console.log('\n🎯 Ready for integration with your community.tsx screen!'); 